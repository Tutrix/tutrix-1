<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tutrix - Tutor Profile</title>
    <style>
        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F3F0F9;
            color: #333;
        }

        .container {
            max-width: 900px;
            margin: 50px auto;
            padding: 20px;
            background-color: #FFFFFF;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        /* Header Section */
        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 28px;
            color: #4B0082;
        }

        /* Profile Section */
        .profile-header {
            text-align: center;
            margin-bottom: 30px;
        }

        .profile-pic {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            border: 4px solid #6A0DAD;
            margin-bottom: 10px;
        }

        .profile-name {
            font-size: 24px;
            font-weight: bold;
            color: #333;
        }

        .profile-role {
            font-size: 16px;
            color: #666;
        }

        /* Stats Section */
        .stats {
            display: flex;
            justify-content: space-around;
            margin: 20px 0;
        }

        .stat-item {
            text-align: center;
        }

        .stat-item h3 {
            font-size: 20px;
            color: #6A0DAD;
            margin: 0;
        }

        .stat-item p {
            font-size: 14px;
            color: #666;
        }

        /* Schedule Section */
        .schedule-section {
            margin-top: 30px;
        }

        .schedule-card {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 15px;
            margin-bottom: 15px;
            background-color: #F9F9FF;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .schedule-info {
            flex: 1;
        }

        .schedule-info h4 {
            margin: 0 0 5px;
            font-size: 18px;
            color: #4B0082;
        }

        .schedule-info p {
            margin: 0;
            font-size: 14px;
            color: #666;
        }

        .schedule-actions {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .accept-button,
        .decline-button {
            padding: 8px 12px;
            font-size: 14px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .accept-button {
            background-color: #28A745;
            color: #FFF;
        }

        .accept-button:hover {
            background-color: #218838;
        }

        .decline-button {
            background-color: #DC3545;
            color: #FFF;
        }

        .decline-button:hover {
            background-color: #C82333;
        }

        /* Button Group */
        .btn-group {
            text-align: center;
            margin-top: 30px;
        }

        .btn {
            padding: 10px 20px;
            margin: 0 10px;
            font-size: 14px;
            font-weight: bold;
            text-decoration: none;
            color: #FFFFFF;
            background-color: #6A0DAD;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .btn:hover {
            background-color: #4B0082;
        }


        /* Dropdown Menu */
        .menu-container {
            position: relative;
            display: inline-block;
        }

        .menu-btn {
            padding: 10px 20px;
            font-size: 14px;
            font-weight: bold;
            text-decoration: none;
            color: #FFFFFF;
            background-color: #6A0DAD;
            border-radius: 5px;
            cursor: pointer;
        }

        .menu-btn:hover {
            background-color: #4B0082;
        }

        .menu-dropdown {
            display: none;
            position: absolute;
            top: 100%;
            left: 0;
            background-color: #FFFFFF;
            border: 1px solid #CCC;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            z-index: 1000;
        }

        .menu-dropdown a {
            display: block;
            padding: 10px 20px;
            color: #333;
            text-decoration: none;
        }

        .menu-dropdown a:hover {
            background-color: #F0F0F0;
        }

        .request-list {
    margin-top: 20px;
}

.request-card {
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 15px;
    margin-bottom: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.accept-button {
    background-color: #28a745;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 5px;
    cursor: pointer;
}

.decline-button {
    background-color: #dc3545;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 5px;
    cursor: pointer;
}

.accept-button:hover {
    background-color: #218838;
}

.decline-button:hover {
    background-color: #c82333;
}

    </style>
    <script>
        // Toggle Menu Dropdown
        function toggleMenu() {
            const dropdown = document.getElementById('menuDropdown');
            dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
        }

        // Redirect to Tasks Page
        function goToTasks() {
            window.location.href = '/tasks';
        }
    </script>
</head>
<script>
    async function setLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(async position => {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;

                try {
                    const response = await fetch('/api/tutor/location', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ lat, lon })
                    });

                    if (response.ok) {
                        const data = await response.json();
                        document.getElementById('location-status').textContent = 'Location updated successfully!';
                        alert(`Updated location: ${JSON.stringify(data)}`);
                    } else {
                        console.log("here!!"); 
                        const errorText = await response.text();
                        alert(errorText); 
                        //console.error('Error in response:', response.status, response.statusText, errorText);
                        document.getElementById('location-status').textContent = 'Failed to update location.';
                    }
                } catch (error) {
                    console.error('Error updating location:', error);
                    document.getElementById('location-status').textContent = 'Error updating location.';
                }
            }, error => {
                console.error('Error getting location:', error);
                document.getElementById('location-status').textContent = 'Unable to get your location.';
            });
        } else {
            document.getElementById('location-status').textContent = 'Geolocation is not supported by your browser.';
        }
    }

    async function disableLocation() {
        try {
            const response = await fetch('/api/tutor/disable-location', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                document.getElementById('location-status').textContent = 'Location disabled successfully!';
            } else {
                const errorText = await response.text();
                console.error('Error disabling location:', errorText);
                document.getElementById('location-status').textContent = 'Failed to disable location.';
            }
        } catch (error) {
            console.error('Error disabling location:', error);
            document.getElementById('location-status').textContent = 'Error disabling location.';
        }
    }

    async function fetchSessionRequests() {
        try {
            const response = await fetch('/api/tutor/requests');
            if (!response.ok) throw new Error('Failed to fetch requests');
            const requests = await response.json();

            const container = document.getElementById('request-container');
            container.innerHTML = '';

            // Only show pending requests
            requests.filter(request => request.status === 'pending').forEach(request => {
                const requestCard = document.createElement('div');
                requestCard.classList.add('request-card');
                requestCard.id = `request-card-${request._id}`;
                requestCard.innerHTML = `
                    <p><strong>Student:</strong> ${request.studentName}</p>
                    <p><strong>Date:</strong> ${new Date(request.date).toLocaleString()}</p>
                    <p><strong>Time:</strong> ${request.time}</p>
                    <p><strong>Reason:</strong> ${request.reason}</p>
                    <button class="accept-button" onclick="respondToRequest('${request._id}', 'accept', '${request.date}')">Accept</button>
                    <button class="decline-button" onclick="respondToRequest('${request._id}', 'decline', '${request.date}')">Decline</button>
                `;
                container.appendChild(requestCard);
            });
        } catch (error) {
            console.error('Error fetching session requests:', error);
        }
    }


    async function respondToRequest(requestId, action, date) {
        try {
            const response = await fetch('/api/tutor/requests/respond', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    requestId, 
                    action, 
                    date: new Date(date).toISOString() }),
            });

            if (response.ok) {
                const result = await response.json();
                const requestCard = document.getElementById(`request-card-${requestId}`);
                if (requestCard) {
                    requestCard.remove(); // Remove the card from the DOM
                }   
                if (action === 'accept') {
                    // Refresh the tutor's availability on the calendar
                    alert('Request accepted. Availability updated.');
                } else if (action === 'decline') {
                    alert('Request declined.');
                }

                fetchSessionRequests(); // Refresh the request list
            } else {
                const { message } = await response.json();
                alert(`Failed to ${action} request: ${message}`);
            }
        } catch (error) {
            console.error(`Error ${action}ing request:`, error);
        }
    }

    fetchSessionRequests();

    async function toggleOnDemand(checkbox) {
        alert("in this function"); 
        const onDemand = checkbox.checked;
        const location = onDemand ? { lat: 12.9716, lon: 77.5946 } : null; 

        try {
            const response = await fetch('/api/tutor/toggle-availability', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ onDemand, location })
            });

            if (response.ok) {
                alert('Availability updated successfully.');
            } else {
                const errorData = await response.json();
                console.error('Error response:', errorData);
                alert('Failed to update availability. ' + errorData.message);
            }
        } catch (error) {
            console.error('Error toggling availability:', error);
        }
    }
</script>
<body>
    <div class="container">
        <!-- Header Section -->
        <div class="header">
            <h1>Tutrix Tutor Profile</h1>
        </div>

        <!-- Profile Section -->
        <div class="profile-header">
            <img src="https://via.placeholder.com/120" alt="Profile Picture" class="profile-pic">
            <div class="profile-name"><%= user.name %></div>
            <div class="profile-role">Tutor</div>
        </div>

        <!-- Stats Section -->
        <div class="stats">
            <div class="stat-item">
                <h3><%= profile.completedSessions %></h3>
                <p>Completed Sessions</p>
            </div>
            <div class="stat-item">
                <h3>5</h3>
                <p>Upcoming Lessons</p>
            </div>
            <div class="stat-item">
                <h3><%= profile.rating.toFixed(1) %> ★</h3>
                <p>Rating</p>
            </div>
        </div>

        <!-- Schedule Section -->
        <div class="schedule-section">
            <h2>Upcoming Schedule</h2>
            <div class="schedule-card">
                <div class="schedule-info">
                    <h4>Calculus Lesson</h4>
                    <p>Friday, Dec 8, 2024 - 2:00 PM</p>
                </div>
                <div class="schedule-actions">
                    <button class="accept-button">Accept</button>
                    <button class="decline-button">Decline</button>
                </div>
            </div>


            <div class="request-list">
                <h2>Session Requests</h2>
                <div id="request-container"></div>
            </div>

        </div>

       

        <!-- Buttons -->
        <div class="btn-group">
            <a href="/payments" class="btn">View Payments</a>
            <a href="/reviews" class="btn">See Reviews</a>

            <a onclick="goToTasks()" class="btn">Tasks</a>
            <div class="menu-container">
                <button class="menu-btn" onclick="toggleMenu()">Menu</button>
                <div id="menuDropdown" class="menu-dropdown">
                    <a href="/profile">Profile</a>
                    <a href="/settings">Settings</a>
                    <a href="/logout">Logout</a>
                </div>
            </div>

            <a href="/tasks" class="btn">Tasks</a>
            <a href="/home" class="btn">Go Home</a>
            <a href="/logout" class="btn">Logout</a>
        </div>

        <div class="btn-group">
            <button onclick="setLocation()" class="btn">Set Current Location</button>
        </div>
        <div id="location-status" style="margin-top: 10px; color: green;"></div>

        <div class="btn-group">
            <button onclick="disableLocation()" class="btn">Disable Current Location</button>

        </div>
        <div id="location-status" style="margin-top: 10px; color: green;"></div>

        <label for="onDemandToggle">On-Demand Availability:</label>
        <input type="checkbox" id="onDemandToggle" onclick="toggleOnDemand(this)">
    </div>
</body>
</html>
