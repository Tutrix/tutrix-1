<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Services | TUTRIX</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/5.11.3/main.min.css">
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js"></script>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        .top-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            background-color: #E6E6FA;
            border-bottom: 1px solid #DDD;
        }

        .app-title {
            font-size: 1.5em;
            font-weight: bold;
        }

        #calendar {
            margin-top: 20px;
            max-width: 100%;
        }
    </style>
</head>
<body>
    <header class="top-bar">
        <h1 class="app-title">Tutrix Services</h1>
        <button onclick="navigateHome()">üè† Home</button>
    </header>

    <main class="container">
        <h2>üìÖ Tutor Availability</h2>
        <div id="calendar"></div>
    </main>

    <script>
        function navigateHome() {
            window.location.href = "/home";
        }

        document.addEventListener('DOMContentLoaded', async function() {
            const calendarEl = document.getElementById('calendar');
            const calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek'
                },
                selectable: true,
                events: async function(fetchInfo, successCallback, failureCallback) {
                    try {
                        const response = await fetch('/api/tutors/all-availability');
                        const events = await response.json();

                        if (!Array.isArray(events)) {
                            console.error('Invalid data format:', events);
                            failureCallback('Error fetching availability');
                            return;
                        }

                        console.log("Populating Calendar with Events:", events);
                        successCallback(events);
                    } catch (error) {
                        console.error('Error fetching tutor availability:', error);
                        failureCallback(error);
                    }
                },
                eventClick: function(info) {
                    const tutorEmail = info.event.extendedProps.tutorEmail;
                    const date = info.event.start.toISOString();
                    const time = info.event.extendedProps.time;
                    const reason = prompt(`Enter reason for booking with ${info.event.title}:`);
                    if (!reason) return;

                    fetch('/api/request-time-slot', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ tutorEmail, date, time, reason })
                    }).then(response => response.json())
                    .then(data => alert(data.message))
                    .catch(error => console.error('Error scheduling:', error));
                }
            });

            calendar.render();
        });
    </script>
</body>
</html>
